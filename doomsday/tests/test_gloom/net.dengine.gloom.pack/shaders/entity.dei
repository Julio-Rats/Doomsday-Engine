shader gloom.entity {
    vertex = "
        #include 'common/bones.glsl'

        uniform mat4 uMvpMatrix;

        DENG_ATTRIB mat4 aInstanceMatrix;
        DENG_ATTRIB vec4 aInstanceColor;

        DENG_ATTRIB vec4 aVertex;
        DENG_ATTRIB vec3 aNormal;
        DENG_ATTRIB vec2 aUV;
        DENG_ATTRIB vec4 aBounds0;

        DENG_VAR vec2 vUV;
        DENG_VAR vec4 vInstanceColor;
        DENG_VAR vec3 vNormal;

        void main(void) {
            vNormal = aNormal;
            vec4 modelPos = Gloom_BoneTransform(aVertex, vNormal);
            gl_Position = uMvpMatrix * (aInstanceMatrix * modelPos);
            vNormal = (aInstanceMatrix * vec4(vNormal, 0.0)).xyz;
            vUV = aBounds0.xy + aUV * aBounds0.zw;
            vInstanceColor = aInstanceColor;
        }"
    fragment = "
        #include 'common/gbuffer_out.glsl'

        uniform sampler2D uTex;

        DENG_VAR vec2 vUV;
        DENG_VAR vec4 vInstanceColor;
        DENG_VAR vec3 vNormal;

        void main(void) {
            vec4 color = texture(uTex, vUV);
            if (color.a < 0.5) discard;
            out_FragColor = color * vInstanceColor;
            GBuffer_SetFragNormal(vNormal);
        }"
}

shader gloom.shadow.entity {
    vertex = "
        #include 'common/bones.glsl'

        uniform mat4 uLightMatrix;

        DENG_ATTRIB mat4 aInstanceMatrix;
        DENG_ATTRIB vec4 aInstanceColor;
        DENG_ATTRIB vec4 aVertex;
        DENG_ATTRIB vec2 aUV;
        DENG_ATTRIB vec4 aBounds0;

        DENG_VAR vec2 vUV;

        void main(void) {
            mat4 bone = Gloom_BoneMatrix();
            gl_Position = uLightMatrix * (aInstanceMatrix * (bone * aVertex));
            vUV = aBounds0.xy + aUV * aBounds0.zw;
        }"
    fragment = "
        uniform sampler2D uTex;

        DENG_VAR vec2 vUV;

        void main(void) {
            float alpha = texture(uTex, vUV).a;
            if (alpha < 0.75) discard;
        }"
}

shader gloom.shadow_cube.entity {
    vertex = "
        #include 'common/bones.glsl'

        in mat4 aInstanceMatrix;
        in vec4 aInstanceColor;
        in vec4 aVertex;
        in vec2 aUV;
        in vec4 aBounds0;

        out vec2 vUV;

        void main(void) {
            mat4 bone = Gloom_BoneMatrix();
            gl_Position = aInstanceMatrix * (bone * aVertex);
            vUV = aBounds0.xy + aUV * aBounds0.zw;
        }"
    path.geometry = "common/cube_faces_uv.gsh"
    fragment = "
        uniform sampler2D uTex;

        uniform vec3  uLightOrigin; // world space
        uniform float uFarPlane;

        in vec4 vWorldPos;
        in vec2 vFaceUV;

        void main(void) {
            float alpha = texture(uTex, vFaceUV).a;
            if (alpha < 0.75) discard;

            // Normalized distance.
            gl_FragDepth = distance(vWorldPos.xyz, uLightOrigin) / uFarPlane;
        }"
}
