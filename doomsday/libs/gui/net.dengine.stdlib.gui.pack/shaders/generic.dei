generic {

# Simple shader with untextured vertices. There is an additional constant
# color applied to all vertices. Uses a combined model-view-projection
# matrix.
shader color_ucolor {
    vertex = "
        uniform mat4 uMvpMatrix;
        uniform vec4 uColor;
        in vec4 aVertex;
        in vec4 aColor;
        out vec4 vColor;

        void main(void) {
            gl_Position = uMvpMatrix * aVertex;
            vColor = uColor * aColor;
        }"
    fragment = "
        in vec4 vColor;

        void main(void) {
            out_FragColor = vColor;
        }"
}

shader texture {
    vertex = "
        uniform mat4 uMvpMatrix;
        in vec4 aVertex;
        in vec2 aUV;
        out vec2 vUV;

        void main(void) {
            gl_Position = uMvpMatrix * aVertex;
            vUV = aUV;
        }"
    fragment = "
        uniform sampler2D uTex;
        in vec2 vUV;

        void main(void) {
            out_FragColor = texture(uTex, vUV);
        }"
}

textured {
    # Simple shader with one texture plus a color per vertex. Uses a
    # combined model-view-projection matrix.
    shader color {
        vertex = "
            uniform mat4 uMvpMatrix;
            in vec4 aVertex;
            in vec2 aUV;
            in vec4 aColor;
            out vec2 vUV;
            out vec4 vColor;

            void main(void) {
                gl_Position = uMvpMatrix * aVertex;
                vUV = aUV;
                vColor = aColor;
            }"
        fragment = "
            uniform sampler2D uTex;
            in vec2 vUV;
            in vec4 vColor;

            void main(void) {
                out_FragColor = vColor * texture(uTex, vUV);
            }"
    }

    # Simple shader with one texture plus a color per vertex. There is
    # an additional constant color applied to all vertices. Uses a
    # combined model-view-projection matrix.
    shader color_ucolor {
        vertex = "
            uniform mat4 uMvpMatrix;
            uniform vec4 uColor;
            in vec4 aVertex;
            in vec2 aUV;
            in vec4 aColor;
            out vec2 vUV;
            out vec4 vColor;

            void main(void) {
                gl_Position = uMvpMatrix * aVertex;
                vUV = aUV;
                vColor = aColor * uColor;
            }"
        fragment = "
            uniform sampler2D uTex;
            in vec2 vUV;
            in vec4 vColor;

            void main(void) {
                out_FragColor = vColor * texture(uTex, vUV);
            }"
    }

    shader hsv.color_ucolor inherits generic.textured.color_ucolor {
        vertex = "
            uniform mat4 uMvpMatrix;
            uniform vec4 uColor;
            in vec4 aVertex;
            in vec2 aUV;
            in vec4 aColor;
            out vec2 vUV;
            out vec4 vColor;

            void main(void) {
                gl_Position = uMvpMatrix * aVertex;
                vUV = aUV;
                vColor = aColor * uColor;
            }"
        fragment = "
            #include 'hsv.glsl'

            uniform sampler2D uTex;
            uniform float uSaturation;
            in vec2 vUV;
            in vec4 vColor;

            void main(void) {
                vec4 hsv = rgbToHsv(texture(uTex, vUV));
                hsv.y *= uSaturation;
                out_FragColor = vColor * hsvToRgb(hsv);
            }"
    }
}

} # generic
