group generic
{
    # Simple shader with untextured vertices. There is an additional constant
    # color applied to all vertices. Uses a combined model-view-projection
    # matrix.
    shader color_ucolor
    {
        vertex = "
            uniform mat4 uMvpMatrix;
            uniform vec4 uColor;
            DE_ATTRIB vec4 aVertex;
            DE_ATTRIB vec4 aColor;
            DE_VAR vec4 vColor;

            void main(void) {
                gl_Position = uMvpMatrix * aVertex;
                vColor = uColor * aColor;
            }"
        fragment = "
            DE_VAR vec4 vColor;

            void main(void) {
                out_FragColor = vColor;
            }"
    }

    shader texture
    {
        vertex = "
            uniform mat4 uMvpMatrix;
            DE_ATTRIB vec4 aVertex;
            DE_ATTRIB vec2 aUV;
            DE_VAR vec2 vUV;

            void main(void) {
                gl_Position = uMvpMatrix * aVertex;
                vUV = aUV;
            }"
        fragment = "
            uniform sampler2D uTex;
            DE_VAR vec2 vUV;

            void main(void) {
                out_FragColor = texture(uTex, vUV);
            }"
    }

    group textured
    {
        # Simple shader with one texture plus a color per vertex. Uses a
        # combined model-view-projection matrix.
        shader color
        {
            vertex = "
                uniform mat4 uMvpMatrix;
                DE_ATTRIB vec4 aVertex;
                DE_ATTRIB vec2 aUV;
                DE_ATTRIB vec4 aColor;
                DE_VAR vec2 vUV;
                DE_VAR vec4 vColor;

                void main(void) {
                    gl_Position = uMvpMatrix * aVertex;
                    vUV = aUV;
                    vColor = aColor;
                }"
            fragment = "
                uniform sampler2D uTex;
                DE_VAR vec2 vUV;
                DE_VAR vec4 vColor;

                void main(void) {
                    out_FragColor = vColor * texture(uTex, vUV);
                }"
        }

        # Simple shader with one texture plus a color per vertex. There is
        # an additional constant color applied to all vertices. Uses a
        # combined model-view-projection matrix.
        shader color_ucolor
        {
            vertex = "
                uniform mat4 uMvpMatrix;
                uniform vec4 uColor;
                DE_ATTRIB vec4 aVertex;
                DE_ATTRIB vec2 aUV;
                DE_ATTRIB vec4 aColor;
                DE_VAR vec2 vUV;
                DE_VAR vec4 vColor;

                void main(void) {
                    gl_Position = uMvpMatrix * aVertex;
                    vUV = aUV;
                    vColor = aColor * uColor;
                }"
            fragment = "
                uniform sampler2D uTex;
                DE_VAR vec2 vUV;
                DE_VAR vec4 vColor;

                void main(void) {
                    out_FragColor = vColor * texture(uTex, vUV);
                }"
        }
    }
}
