model.skeletal {
    # Shader for skeletal animation and generic per-pixel lighting:
    # diffuse color, normal map, emissive map, specular intensity.
    # Also supports a custom UV macro.
    shader generic {
        variable uAlphaLimit     { value = 0 }
        variable uAlpha          { value = 1 }
        variable uColor          { value <1, 1, 1> }
        variable uOffsetUV       { value <0, 0> }
        variable uSpecular       { value = 1 }
        variable uEmission       { value = 0 }
        variable uGlossiness     { value = 100 }
        variable uReflection     { value = 1 }
        variable uReflectionBlur { value = 10 }

        variable uMapTime {}

        # Mapping when used with ModelDrawable.
        textureMapping <diffuse, normals, specular, emission>

        include.vertex <include/tangentspace.glsl,
                        include/skeletal.glsl,
                        include/lighting.glsl>
        vertex = "
            uniform mat4 uMvpMatrix;

            in vec4 aVertex;
            in vec4 aColor;
            in vec2 aUV;
            in vec4 aBounds0;   // diffuse map
            in vec4 aBounds1;  // normal map
            in vec4 aBounds2;  // specular map
            in vec4 aBounds3;  // emission map

            out vec4 vColor;
            out vec2 vUV;
            out vec4 vUVBounds[4];

            void main(void)
            {
                mat4 bone = vertexBoneTransform();
                setTangentSpace(bone);

                // Vertex position.
                vec4 modelPos = bone * aVertex;
                calculateEyeDirection(modelPos);

                gl_Position = uMvpMatrix * modelPos;

                vColor = aColor;
                vUV = aUV;
                vUVBounds[0] = aBounds0;
                vUVBounds[1] = aBounds1;
                vUVBounds[2] = aBounds2;
                vUVBounds[3] = aBounds3;
            }"

        defines $= {'PREDEF_TRANSFORM_UV(uv)'          : '',
                    'PREDEF_TRANSFORM_EMISSION(color)' : '',
                    'PREDEF_TRANSFORM_ALPHA(alpha)'    : ''}

        include.fragment <include/texture.glsl,
                          include/tangentspace.glsl,
                          include/lighting.glsl,
                          include/reflection.glsl,
                          include/fog.glsl>
        fragment = "
            uniform vec3 uColor;       // diffuse color multiplier
            uniform float uAlpha;      // diffuse alpha multiplier
            uniform float uAlphaLimit; // alpha test to discard fragments
            uniform vec2 uOffsetUV;
            uniform float uMapTime;

            in vec4 vColor;
            in vec2 vUV;
            in vec4 vUVBounds[4];

            void main(void)
            {
                // Calculate UV at the fragment (wrapped inside the bounds).
                vec2 wrappedUV = vUV + uOffsetUV;
            #if defined (PREDEF_TRANSFORM_UV)
                PREDEF_TRANSFORM_UV(wrappedUV);
            #endif
                wrappedUV = fract(wrappedUV);

                vec2 uv         = mapToBounds(wrappedUV, vUVBounds[0]);
                vec2 normalUV   = mapToBounds(wrappedUV, vUVBounds[1]);
                vec2 specularUV = mapToBounds(wrappedUV, vUVBounds[2]);
                vec2 emissiveUV = mapToBounds(wrappedUV, vUVBounds[3]);

                vec3 msNormal = modelSpaceNormalVector(normalUV);
                vec4 specGloss = specularGloss(specularUV);

                float alphaFactor = uAlpha;
            #if defined (PREDEF_TRANSFORM_ALPHA)
                PREDEF_TRANSFORM_ALPHA(alphaFactor);
            #endif
                out_FragColor = diffuseAndReflectedLight(
                    vColor * vec4(uColor, alphaFactor), uv, specGloss, msNormal);

                if (out_FragColor.a < uAlphaLimit) discard;

                out_FragColor.rgb += specularLight(specGloss, msNormal);

                // Emitted light.
                vec4 emitted = emittedLight(emissiveUV);
            #if defined (PREDEF_TRANSFORM_EMISSION)
                PREDEF_TRANSFORM_EMISSION(emitted);
            #endif
                out_FragColor += emitted;

                applyFog();
            }"
    }

    # Variant of the generic shader that is suitable for opaque objects
    # with no transparency.
    shader opaque.generic inherits model.skeletal.generic {
        variable uAlphaLimit { value = 0.5 }
        fragment = "
            uniform vec3 uColor;       // diffuse color multiplier
            uniform float uAlpha;
            uniform float uAlphaLimit; // alpha test to discard fragments
            uniform vec2 uOffsetUV;
            uniform float uMapTime;

            in vec4 vColor;
            in vec2 vUV;
            in vec4 vUVBounds[4];

            void main(void)
            {
                // Calculate UV at the fragment (wrapped inside the bounds).
                vec2 wrappedUV = vUV + uOffsetUV;
            #if defined (PREDEF_TRANSFORM_UV)
                PREDEF_TRANSFORM_UV(wrappedUV);
            #endif
                wrappedUV = fract(wrappedUV);
                vec2 uv         = mapToBounds(wrappedUV, vUVBounds[0]);
                vec2 normalUV   = mapToBounds(wrappedUV, vUVBounds[1]);
                vec2 specularUV = mapToBounds(wrappedUV, vUVBounds[2]);
                vec2 emissiveUV = mapToBounds(wrappedUV, vUVBounds[3]);

                vec3 msNormal = modelSpaceNormalVector(normalUV);
                vec4 specGloss = specularGloss(specularUV);

                out_FragColor = diffuseAndReflectedLight(
                    vColor * vec4(uColor, uAlpha), uv, specGloss, msNormal);

                if (out_FragColor.a < uAlphaLimit) discard;

                out_FragColor.rgb += specularLight(specGloss, msNormal);
                out_FragColor += emittedLight(emissiveUV);

                applyFog();
            }"
    }

    # Shader for damage/blood effects. No emissive map, and alpha
    # output is either opaque or fully transparent. Alpha limit can
    # be used to control how much of the effect is visible.
    shader opaque.nonemissive {
        variable uAlphaLimit     { value = 0.5 }
        variable uAlpha          { value = 1.0 }
        variable uColor          { value <1, 1, 1> }
        variable uOffsetUV       { value <0, 0> }
        variable uSpecular       { value = 1 }
        variable uGlossiness     { value = 100 }
        variable uReflectionBlur { value = 10 }

        variable uMapTime {}

        # Mapping when used with ModelDrawable.
        textureMapping <diffuse, normals, specular>

        defines $= {'PREDEF_TRANSFORM_UV(uv)': ''}

        include.vertex <include/tangentspace.glsl,
                        include/skeletal.glsl,
                        include/lighting.glsl>
        vertex = "
            uniform mat4 uMvpMatrix;

            in vec4 aVertex;
            in vec4 aColor;
            in vec2 aUV;
            in vec4 aBounds0;   // diffuse map
            in vec4 aBounds1;  // normal map
            in vec4 aBounds2;  // specular map

            out vec4 vColor;
            out vec2 vUV;
            out vec4 vUVBounds[3];

            void main(void)
            {
                mat4 bone = vertexBoneTransform();
                setTangentSpace(bone);

                // Vertex position.
                vec4 modelPos = bone * aVertex;
                calculateEyeDirection(modelPos);

                gl_Position = uMvpMatrix * modelPos;

                vColor = aColor;
                vUV = aUV;
                vUVBounds[0] = aBounds0;
                vUVBounds[1] = aBounds1;
                vUVBounds[2] = aBounds2;
            }"

        include.fragment <include/texture.glsl,
                          include/tangentspace.glsl,
                          include/lighting.glsl,
                          include/reflection.glsl,
                          include/fog.glsl>
        fragment = "
            uniform float uAlphaLimit;
            uniform float uAlpha;
            uniform vec3 uColor;       // diffuse color multiplier
            uniform vec2 uOffsetUV;
            uniform float uMapTime;

            in vec4 vColor;
            in vec2 vUV;
            in vec4 vUVBounds[3];

            void main(void)
            {
                // Calculate UV at the fragment (wrapped inside the bounds).
                vec2 wrappedUV = vUV + uOffsetUV;
            #if defined (PREDEF_TRANSFORM_UV)
                PREDEF_TRANSFORM_UV(wrappedUV);
            #endif
                wrappedUV = fract(wrappedUV);
                vec2 uv         = mapToBounds(wrappedUV, vUVBounds[0]);
                vec2 normalUV   = mapToBounds(wrappedUV, vUVBounds[1]);
                vec2 specularUV = mapToBounds(wrappedUV, vUVBounds[2]);

                vec3 msNormal = modelSpaceNormalVector(normalUV);
                vec4 specGloss = specularGloss(specularUV);

                out_FragColor = diffuseAndReflectedLight(
                    vColor * vec4(uColor, uAlpha), uv, specGloss, msNormal);
                if (out_FragColor.a < uAlphaLimit) discard;

                out_FragColor.rgb += specularLight(specGloss, msNormal);

                out_FragColor.a = uAlpha;

                applyFog();
            }"
    }

    shader opaque.matte {
        variable uAlphaLimit     { value = 0.5 }
        variable uAlpha          { value = 1.0 }
        variable uColor          { value <1, 1, 1> }
        variable uOffsetUV       { value <0, 0> }

        variable uMapTime {}

        # Mapping when used with ModelDrawable.
        textureMapping <diffuse, normals>

        defines $= {'PREDEF_TRANSFORM_UV(uv)': ''}

        include.vertex <include/tangentspace.glsl,
                        include/skeletal.glsl,
                        include/lighting.glsl>
        vertex = "
            uniform mat4 uMvpMatrix;

            in vec4 aVertex;
            in vec4 aColor;
            in vec2 aUV;
            in vec4 aBounds0;   // diffuse map
            in vec4 aBounds1;  // normal map

            out vec4 vColor;
            out vec2 vUV;
            out vec4 vUVBounds[2];

            void main(void)
            {
                mat4 bone = vertexBoneTransform();
                setTangentSpace(bone);

                // Vertex position.
                vec4 modelPos = bone * aVertex;
                calculateEyeDirection(modelPos);

                gl_Position = uMvpMatrix * modelPos;

                vColor = aColor;
                vUV = aUV;
                vUVBounds[0] = aBounds0;
                vUVBounds[1] = aBounds1;
            }"

        include.fragment <include/texture.glsl,
                          include/tangentspace.glsl,
                          include/lighting.glsl,
                          include/fog.glsl>
        fragment = "
            uniform float uAlphaLimit;
            uniform float uAlpha;
            uniform vec3 uColor;       // diffuse color multiplier
            uniform vec2 uOffsetUV;
            uniform float uMapTime;

            in vec4 vColor;
            in vec2 vUV;
            in vec4 vUVBounds[2];

            void main(void)
            {
                // Calculate UV at the fragment (wrapped inside the bounds).
                vec2 wrappedUV = vUV + uOffsetUV;
            #if defined (PREDEF_TRANSFORM_UV)
                PREDEF_TRANSFORM_UV(wrappedUV);
            #endif
                wrappedUV = fract(wrappedUV);
                vec2 uv         = mapToBounds(wrappedUV, vUVBounds[0]);
                vec2 normalUV   = mapToBounds(wrappedUV, vUVBounds[1]);

                vec3 msNormal = modelSpaceNormalVector(normalUV);
                out_FragColor = vColor * vec4(uColor * diffuseLight(msNormal), 1.0)
                             * texture(uTex, uv);
                if (out_FragColor.a < uAlphaLimit) discard;

                out_FragColor.a = uAlpha;

                applyFog();
            }"
    }

    # Shader for special effects. Only uses a diffuse texture map.
    # No external lighting.
    shader unlit.diffuse {
        variable uAlphaLimit { value = 0 }
        variable uAlpha      { value = 1.0 }
        variable uColor      { value <1, 1, 1> }
        variable uOffsetUV   { value <0, 0> }

        variable uMapTime {}

        # Mapping when used with ModelDrawable.
        textureMapping <diffuse>

        defines $= {'PREDEF_TRANSFORM_UV(uv)'       : '',
                    'PREDEF_TRANSFORM_ALPHA(alpha)' : ''}

        include.vertex <include/skeletal.glsl>
        vertex = "
            uniform mat4 uMvpMatrix;

            in vec4 aVertex;
            in vec4 aColor;
            in vec2 aUV;
            in vec4 aBounds0;   // diffuse map

            out vec4 vColor;
            out vec2 vUV;
            out vec4 vUVBounds;

            void main(void)
            {
                mat4 bone = vertexBoneTransform();

                // Vertex position.
                vec4 modelPos = bone * aVertex;
                gl_Position = uMvpMatrix * modelPos;

                vColor = aColor;
                vUV = aUV;
                vUVBounds = aBounds0;
            }"

        include.fragment <include/texture.glsl>
        fragment = "
            uniform float uAlphaLimit;
            uniform float uAlpha;
            uniform vec3 uColor;       // diffuse color multiplier
            uniform vec2 uOffsetUV;
            uniform float uMapTime;

            in vec4 vColor;
            in vec2 vUV;
            in vec4 vUVBounds;

            void main(void)
            {
                // Calculate UV at the fragment (wrapped inside the bounds).
                vec2 wrappedUV = vUV + uOffsetUV;
            #if defined (PREDEF_TRANSFORM_UV)
                PREDEF_TRANSFORM_UV(wrappedUV);
            #endif
                wrappedUV = fract(wrappedUV);
                vec2 uv = mapToBounds(wrappedUV, vUVBounds);

                vec4 diffuse = vColor * texture(uTex, uv);
                if (diffuse.a < uAlphaLimit) discard;

                float alphaFactor = uAlpha;
            #if defined (PREDEF_TRANSFORM_ALPHA)
                PREDEF_TRANSFORM_ALPHA(alphaFactor);
            #endif
                out_FragColor = diffuse * vec4(uColor, alphaFactor);
            }"
    }
}
